package com.gmp.tariff.lib;

import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Months;
import org.joda.time.Weeks;

import java.util.*;

public class MaximaCalculator {

    public static final String DAY = "DAY";
    public static final String WEEK = "WEEK";
    public static final String MONTH = "MONTH";

    private DateTime inTime;
    private DateTime outTime;

    private int defaultDayMax;
    private int defaultWeekMax;
    private int defaultMonthMax;
    private int freeTimeInMinutes = 0;

    private boolean isBossDurationInDay = true;
    private boolean isBossDurationInWeek = true;
    private boolean isBossDurationInMonth = true;

    private int endMinuteForDay = 0;
    private int endMinuteForWeek = 0;
    private int endMinuteForMonth = 0;

    private ArrayList<Integer> daySequence;
    private ArrayList<Integer> weekSequence;
    private ArrayList<Integer> monthSequence;

    private ArrayList<TariffSample> dayTariffList = new ArrayList<>();
    private ArrayList<TariffSample> weekTariffList = new ArrayList<>();
    private ArrayList<TariffSample> monthTariffList = new ArrayList<>();
    private ArrayList<TariffSample> mergedList = new ArrayList<>();
    private ArrayList<TariffSample> finalTariffList = new ArrayList<>();

    private int totalAmount;

    private TariffCalculator calculator;
    private DateTime pointer;
    private List<String> tariffCalculatorLogs = new ArrayList<>();
    private List<String> maximaCalculatorLogs = new ArrayList<>();
    private List<Slot> freeTimeSlot = new ArrayList<>();

    public List<Slot> getFreeTimeSlot() {
        return freeTimeSlot;
    }

    public DateTime getOutTime() {
        return outTime;
    }

    public void setOutTime(DateTime outTime) {
        this.outTime = outTime;
    }

    public void setFreeTimeSlot(List<Slot> freeTimeSlot) {
        this.freeTimeSlot = freeTimeSlot;
    }

    public List<String> getTariffCalculatorLogs(){
        return tariffCalculatorLogs;
    }

    public List<String> getMaximaCalculatorLogs() { return maximaCalculatorLogs; }

    public int getFreeTimeInMinutes() {
        return freeTimeInMinutes;
    }

    public void setFreeTimeInMinutes(int freeTimeInMinutes) {
        this.freeTimeInMinutes = freeTimeInMinutes;
    }

    public boolean isBossDurationInDay() {
        return isBossDurationInDay;
    }

    public void setBossDurationInDay(boolean bossDurationInDay) {
        isBossDurationInDay = bossDurationInDay;
    }

    public boolean isBossDurationInWeek() {
        return isBossDurationInWeek;
    }

    public void setBossDurationInWeek(boolean bossDurationInWeek) {
        isBossDurationInWeek = bossDurationInWeek;
    }

    public boolean isBossDurationInMonth() {
        return isBossDurationInMonth;
    }

    public void setBossDurationInMonth(boolean bossDurationInMonth) {
        isBossDurationInMonth = bossDurationInMonth;
    }

    public int getEndMinuteForDay() {
        return endMinuteForDay;
    }

    public void setEndMinuteForDay(int endMinuteForDay) {
        this.endMinuteForDay = endMinuteForDay;
    }

    public int getEndMinuteForWeek() {
        return endMinuteForWeek;
    }

    public void setEndMinuteForWeek(int endMinuteForWeek) {
        this.endMinuteForWeek = endMinuteForWeek;
    }

    public int getEndMinuteForMonth() {
        return endMinuteForMonth;
    }

    public void setEndMinuteForMonth(int endMinuteForMonth) {
        this.endMinuteForMonth = endMinuteForMonth;
    }

    public MaximaCalculator(DateTime inTime,
                            DateTime outTime,
                            StackTemplate template,
                            DateTime parkingSessionEntryTime,
                            DateTime parkingSessionExitTime) {
        this.inTime = inTime;
        this.outTime = outTime;

        Maxima max = template.getMaxima();

        Map<Integer, Map<Integer,ArrayList<TariffSample>>> consumedMaxima= new HashMap<>();

        isBossDurationInDay = max.isBossDurationInDay();
        isBossDurationInWeek = max.isBossDurationInWeek();
        isBossDurationInMonth = max.isBossDurationInMonth();

        endMinuteForDay = max.getEndMinuteForDay();
        endMinuteForWeek = max.getEndMinuteForWeek();
        endMinuteForMonth = max.getEndMinuteForMonth();


        defaultDayMax = max.getDefaultDay();
        defaultWeekMax = max.getDefaultWeek();
        defaultMonthMax = max.getDefaultMonth();

        daySequence = max.getDaySequence();
        weekSequence = max.getWeekSequence();
        monthSequence = max.getMonthSequence();

        calculator = new TariffCalculator(inTime, outTime, template);

        if(Objects.isNull(parkingSessionEntryTime) || Objects.isNull(parkingSessionExitTime))
        {
            totalAmount = calculator.calculate(inTime, outTime);
        } else {
            totalAmount = calculator.calculate(parkingSessionEntryTime, parkingSessionExitTime);
        }

        freeTimeInMinutes += calculator.getFreeTimeInMinutes();
        freeTimeSlot = calculator.getFreeTimeSlot();

        tariffCalculatorLogs.addAll(calculator.getLogs());

//        logger.info("Tariff Calculator amount: " + totalAmount);
//
//        logger.info("Day Max: " + defaultDayMax);
//        logger.info("Week Max: " + defaultWeekMax);
//        logger.info("Month Max: " + defaultMonthMax);

        pointer = new DateTime(inTime.plusDays(1));
    }



    public int calculate() {
        int amount = 0;
        int dayAmount;
        int listSize;
        int adjustedAmount;
        DateTime in = new DateTime(inTime);
        if (!isBossDurationInDay()) {
            setDayPointer(in);

            if(outTime.isBefore(pointer)){
                return getFirstDayAmount();
            }
        } else {
            if(Days.daysBetween(inTime, outTime).getDays() == 0) {
                return getFirstDayAmount();
            }
        }

        int dayNumber = 1;
        int daySequenceAmount = 0;

        while (!pointer.isAfter(outTime)) {
            calculator.setOutTime(pointer);
            amount = calculator.calculate();
            listSize = dayTariffList.size();

            if(!dayTariffList.isEmpty()) {
                dayAmount = amount - dayTariffList.get(listSize -1).getTariffTillOutTime();
            } else {
                dayAmount = amount;
            }

            if(daySequence.size() >= dayNumber) {
                daySequenceAmount = daySequence.get(dayNumber-1);
            }

            if(daySequenceAmount > 0) {
                if(daySequenceAmount <= dayAmount) {
                    adjustedAmount = daySequenceAmount;
                } else {
                    adjustedAmount = dayAmount;
                }
            } else {
                if(defaultDayMax > 0 && defaultDayMax <= dayAmount) {
                    adjustedAmount = defaultDayMax;
                } else {
                    adjustedAmount = dayAmount;
                }
            }

            TariffSample t = new TariffSample(in, pointer, dayAmount, adjustedAmount, amount, DAY);
            dayTariffList.add(t);

//            logger.info("Day Amount: " + dayAmount);
//            logger.info("Day: " + t.toString());

            in = new DateTime(pointer);
            pointer = pointer.plusDays(1);
            daySequenceAmount = 0;
            dayNumber++;
        }

        //Last day amount
        dayAmount = totalAmount - amount;

        if(daySequence.size() >= dayNumber) {
            daySequenceAmount = daySequence.get(dayNumber-1);
        }

        if(daySequenceAmount > 0) {
            if(daySequenceAmount <= dayAmount) {
                adjustedAmount = daySequenceAmount;
            } else {
                adjustedAmount = dayAmount;
            }
        } else {
            if(defaultDayMax > 0 && defaultDayMax <= dayAmount) {
                adjustedAmount = defaultDayMax;
            } else {
                adjustedAmount = dayAmount;
            }
        }

        pointer = pointer.minusDays(1);
        TariffSample last = new TariffSample(pointer, outTime, dayAmount, adjustedAmount, totalAmount, DAY);
        dayTariffList.add(last);

//        logger.info("dayTariffList size: " + dayTariffList.size());

        generateTariffLists();
        return calculateTotalAmount();
    }

    private void setDayPointer(DateTime in) {
        if(in.isAfter(in.withTimeAtStartOfDay().plusMinutes(endMinuteForDay))){
            pointer = pointer.withTimeAtStartOfDay().plusMinutes(endMinuteForDay);
        }else {
            pointer = inTime.withTimeAtStartOfDay().plusMinutes(endMinuteForDay);
        }
    }

    private int getFirstDayAmount() {
        int amount = totalAmount;
        if(!daySequence.isEmpty()) {
            int day1Max = daySequence.get(0);
            if(totalAmount > day1Max) {
                amount = day1Max;
            }
        } else if(defaultDayMax > 0 && totalAmount > defaultDayMax) {
            amount = defaultDayMax;
        }
        TariffSample ts = new TariffSample(inTime, outTime, totalAmount, amount, totalAmount, DAY);
        maximaCalculatorLogs.add(ts.toString());
        return amount;
    }

    private void generateTariffLists(){
        generateMonthList();
        generateWeekList();
        mergeLists();
        generateFinalList();
        generateConsumedMaximaMapping();
    }

    private void generateConsumedMaximaMapping() {
        for(TariffSample t: finalTariffList){

        }
    }

    private void generateMonthList() {
        if(defaultMonthMax == 0 && monthSequence.isEmpty()) {
            return;
        }

        DateTime monthPointer = new DateTime(inTime);
        DateTime in = new DateTime(inTime);

        int amount;
        int adjustedAmount;
        int tariffAmount = 0;

        monthPointer = monthPointer.plusMonths(1);

        pointer = new DateTime(inTime);
        pointer = pointer.plusDays(1);

        if(!isBossDurationInMonth()){
            monthPointer = setMonthPointer(monthPointer, in);
        }
        if(!isBossDurationInDay()){
            setDayPointer(in);
        }

        int monthNumber = 1;
        int monthSequenceAmount = 0;

        while (!monthPointer.isAfter(outTime)) {
            amount = 0;

            while(!pointer.isAfter(monthPointer)){
                TariffSample ts = findTariffSample(pointer, dayTariffList);
                pointer = pointer.plusDays(1);
                if(ts !=null){
                    amount += ts.getAdjustedAmount();
                    tariffAmount = ts.getTariffTillOutTime();
                }

            }
            if(monthSequence.size() >= monthNumber) {
                monthSequenceAmount = monthSequence.get(monthNumber - 1);
            }

            if(monthSequenceAmount > 0) {
                if(monthSequenceAmount <= amount) {
                    adjustedAmount = monthSequenceAmount;
                } else {
                    adjustedAmount = amount;
                }
            } else {
                if(defaultMonthMax > 0 && defaultMonthMax <= amount) {
                    adjustedAmount = defaultMonthMax;
                } else {
                    adjustedAmount = amount;
                }
            }

            TariffSample t = new TariffSample(in, monthPointer, amount, adjustedAmount, tariffAmount, MONTH);
            monthTariffList.add(t);

            in = new DateTime(monthPointer);
            monthPointer = monthPointer.plusMonths(1);

            monthNumber++;
            monthSequenceAmount = 0;
//            logger.info("Month: " + t.toString());
        }
    }

    private DateTime setMonthPointer(DateTime monthPointer, DateTime in) {
        if(in.isAfter(in.withDayOfMonth(1)
                        .withTimeAtStartOfDay()
                        .plusMinutes(endMinuteForMonth))){


            monthPointer = monthPointer
                    .withDayOfMonth(1)
                    .withTimeAtStartOfDay()
                    .plusMinutes(endMinuteForMonth);
        }else {
            monthPointer = inTime
                    .withDayOfMonth(1)
                    .withTimeAtStartOfDay()
                    .plusMinutes(endMinuteForMonth);
        }
        return monthPointer;
    }

    private void generateWeekList() {
        if(defaultWeekMax == 0 && weekSequence.isEmpty()) {
            return;
        }

        DateTime in = new DateTime(inTime);
        DateTime weekPointer;

        int amount = 0;
        int tariffAmount = 0;
        int weekSequenceAmount = 0;
        int weekNumber = 1;
        int adjustedAmount;



        if(!monthTariffList.isEmpty()) {
            DateTime m = monthTariffList.get(monthTariffList.size()-1).getOutTime();
            weekPointer = new DateTime(m);
            in = new DateTime(m);
            pointer = new DateTime(m);
        } else {
            weekPointer = new DateTime(inTime);
            pointer = new DateTime(inTime);
        }

        weekPointer = weekPointer.plusWeeks(1);
        pointer = pointer.plusDays(1);

        if(!isBossDurationInWeek()){
            weekPointer = setWeekPointer(in, weekPointer);
        }
        if(!isBossDurationInDay()){
            setDayPointer(in);
        }

        while (!weekPointer.isAfter(outTime)) {

            amount = 0;
            while(!pointer.isAfter(weekPointer)) {
                TariffSample ts = findTariffSample(pointer, dayTariffList);
                pointer = pointer.plusDays(1);
                if(ts !=null){
                    amount += ts.getAdjustedAmount();
                    tariffAmount = ts.getTariffTillOutTime();
                }
            }


            if(weekSequence.size() >= weekNumber) {
                weekSequenceAmount = weekSequence.get(weekNumber - 1);
            }

            if(weekSequenceAmount > 0) {
                if(weekSequenceAmount <= amount) {
                    adjustedAmount = weekSequenceAmount;
                } else {
                    adjustedAmount = amount;
                }
            } else {
                if(amount > defaultWeekMax){
                    adjustedAmount = defaultWeekMax;
                } else {
                    adjustedAmount = amount;
                }
            }

            TariffSample t = new TariffSample(in, weekPointer, amount, adjustedAmount, tariffAmount, WEEK);
            weekTariffList.add(t);

            in = new DateTime(weekPointer);
            weekPointer = weekPointer.plusWeeks(1);
            weekNumber++;
            weekSequenceAmount = 0;

//            logger.info("Week: " + t.toString());
        }
    }

    private DateTime setWeekPointer(DateTime in, DateTime weekPointer) {
        if(in.isAfter(
                in.withDayOfWeek(1)
                .withTimeAtStartOfDay()
                .plusMinutes(endMinuteForWeek))){


            weekPointer = weekPointer
                    .withDayOfWeek(1)
                    .withTimeAtStartOfDay()
                    .plusMinutes(endMinuteForWeek);
        }else {
            weekPointer = inTime
                    .withDayOfWeek(1)
                    .withTimeAtStartOfDay()
                    .plusMinutes(endMinuteForWeek);
        }
        return weekPointer;
    }

    private void mergeLists() {
        mergedList.addAll(monthTariffList);
        mergedList.addAll(weekTariffList);

        for (TariffSample t: dayTariffList
        ) {
            if(!mergedList.isEmpty()) {
                int lastIndex = mergedList.size() - 1;
                pointer = new DateTime(mergedList.get(lastIndex).getOutTime());

                if(t.getOutTime().isAfter(pointer)){
                    mergedList.add(t);
                }

            } else {
                mergedList.addAll(dayTariffList);
            }
        }

        maximaCalculatorLogs.add("---- MERGED LIST ----");
        for (TariffSample t: mergedList
        ) {
//            logger.info("Merged: {}", t.toString());
            maximaCalculatorLogs.add(t.toString());
        }
    }

    private void generateFinalList() {
        finalTariffList.addAll(monthTariffList);
        int amount = 0;
        int adjustedAmount;
        int tariffTillOutTime = 0;
        boolean first = true;
        DateTime in = null;

        for (TariffSample t: mergedList
        ) {
            if(!t.getType().equals(MONTH)) {
                if(first){
                    first = false;
                    in = new DateTime(t.getInTime());
                }

                amount +=  t.adjustedAmount;
                tariffTillOutTime = t.getTariffTillOutTime();
            }
        }

        int monthIndex = Months.monthsBetween(inTime, outTime).getMonths();
        int monthMaxInitial = (monthSequence.isEmpty() || monthSequence.size() <= monthIndex) ? defaultMonthMax : monthSequence.get(monthIndex);

        if(monthMaxInitial > 0 && amount > monthMaxInitial) {
            adjustedAmount = monthMaxInitial;
            TariffSample ts = new TariffSample(in, outTime, amount, adjustedAmount, tariffTillOutTime, MONTH);
            finalTariffList.add(ts);
            addFinalLogs();

        } else {
            finalTariffList.addAll(weekTariffList);
            first = true;
            amount = 0;
            tariffTillOutTime = 0;

            for (TariffSample t: mergedList
            ) {
                if(t.getType().equals(DAY)) {
                    if(first) {
                        in = new DateTime(t.getInTime());
                        first = false;
                    }

                    amount +=  t.adjustedAmount;
                    tariffTillOutTime = t.getTariffTillOutTime();
                }
            }

            int weekIndex = Weeks.weeksBetween(inTime, outTime).getWeeks();
            int weekMaxInitial = (weekSequence.isEmpty()  || weekSequence.size() <= weekIndex) ? defaultWeekMax : weekSequence.get(weekIndex);
            if(weekMaxInitial > 0 && amount > weekMaxInitial) {
                adjustedAmount = weekMaxInitial;
                TariffSample ts = new TariffSample(in, outTime, amount, adjustedAmount, tariffTillOutTime, WEEK);
                finalTariffList.add(ts);
                addFinalLogs();

            } else {
                for (TariffSample t: mergedList
                ) {
                    if(t.getType().equals(DAY)) {
                        finalTariffList.add(t);
                    }
                }

                addFinalLogs();
            }
        }
    }

    private void addFinalLogs() {
        maximaCalculatorLogs.add("---- FINAL LIST ----");
        for (TariffSample t: finalTariffList
        ) {
            maximaCalculatorLogs.add(t.toString());
        }
        maximaCalculatorLogs.add("--------------------");
    }

    private TariffSample findTariffSample(DateTime dt, ArrayList<TariffSample> list) {
        TariffSample ts = null;
        for (TariffSample t: list
        ) {
            if(t.getOutTime().isEqual(dt)) {
                ts = t;
                break;
            }
        }
        return ts;
    }

    private int calculateTotalAmount() {
        int total = 0;

        for (TariffSample s: finalTariffList
        ) {
            total += s.getAdjustedAmount();
        }
        maximaCalculatorLogs.add("Total Amount: " + total);
        return total;
    }

    private class TariffSample {
        private DateTime inTime;
        private DateTime outTime;
        private String type;

        private int amount;
        private int adjustedAmount;
        private int tariffTillOutTime;

        public int getTariffTillOutTime() {
            return tariffTillOutTime;
        }

        public TariffSample(DateTime inTime, DateTime outTime, int amount, int adjustedAmount, int tariffTillOutTime, String type){
            this.inTime = inTime;
            this.outTime = outTime;
            this.amount = amount;
            this.adjustedAmount = adjustedAmount;
            this.tariffTillOutTime = tariffTillOutTime;
            this.type = type;
        }

        public DateTime getInTime() {
            return inTime;
        }

        public String getType() {
            return type;
        }

        public DateTime getOutTime() {
            return outTime;
        }

        public void setOutTime(DateTime out) {
            this.outTime = out;
        }

        public int getAmount() {
            return amount;
        }

        public void setAmount(int amount) {
            this.amount = amount;
        }

        public int getAdjustedAmount() {
            return adjustedAmount;
        }

        public void setAdjustedAmount(int adjustedAmount) {
            this.adjustedAmount = adjustedAmount;
        }

        @Override
        public String toString(){
            return "In Time: " + inTime.toString("dd MMM, HH:mm") + " | OutTime: " + outTime.toString("dd MMM, HH:mm") +
                    " | Type: " + type + " | TariffAmount: " + amount + " | MaxAmount: " + adjustedAmount;
        }
    }
}
